/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.junit.Test;
import org.mule.DefaultMuleMessage;
import org.mule.api.MessagingException;
import org.mule.api.MuleEvent;
import org.mule.api.MuleMessage;
import org.mule.api.transport.PropertyScope;
import org.mule.construct.Flow;
import org.mule.tck.junit4.FunctionalTestCase;
import org.mule.transport.NullPayload;

public class MuleRequesterModuleTest extends FunctionalTestCase
{
    @Override
    protected String getConfigResources()
    {
        return "mule-config.xml";
    }

    @Test
    public void testDefaultRequest() throws Exception
    {
        muleContext.getClient().dispatch("vm://in", "some string", new HashMap<String, Object>());
        runFlowAndExpect("testDefaultRequest", "some string");
    }

    @Test
    public void testDefaultTimeout() throws Exception
    {
        runFlowAndExpect("testDefaultTimeout", NullPayload.getInstance());
    }

    @Test
    public void testCustomTimeout() throws Exception
    {
        runFlowAndExpect("testCustomTimeout", NullPayload.getInstance());
    }

    @Test
    public void testTransformer() throws Exception
    {
        muleContext.getClient().dispatch("vm://in", loadResource("resource.txt"), new HashMap<String, Object>());
        runFlowAndExpect("testTransformer", "some file resource");
    }

    @Test
    public void testResourceFromPayload() throws Exception
    {
        muleContext.getClient().dispatch("vm://testpayload", "my payload", new HashMap<String, Object>());
        runFlowAndExpect("testResourceFromPayload", "my payload");
    }

    @Test
    public void testResourceFromProperty() throws Exception
    {
        muleContext.getClient().dispatch("vm://testproperties", "my property", new HashMap<String, Object>());
        runFlowAndExpect("testResourceFromProperties", "my property");
    }
    
    @Test
    public void verifyPropertyNotBeingOverridden() throws Exception
    {
        HashMap<String, Object> properties = new HashMap<String, Object>();
        properties.put("property", "my property");
        MuleMessage message = new DefaultMuleMessage("my property",properties,muleContext );
        muleContext.getClient().dispatch("vm://testproperties", message );
        runFlowAndExpectProperties("testResourceFromProperties", properties);
    }

    public void testThrowExceptionOnError() throws Exception
    {
        Flow flow = lookupFlowConstruct("testThrowExceptionOnTimeout");
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        try {
            MuleEvent responseEvent = flow.process(event);
        } catch (Exception e) {
            assertEquals(MessagingException.class, e.getClass());
            assertEquals("No message received in the configured timeout - 1000", e.getCause().getMessage());
        }
    }

   /**
    * Run the flow specified by name and assert equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    */
    protected <T> void runFlowAndExpect(String flowName, T expect) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }
    
    /**
     * Run the flow specified by name and assert equality on the expected output
     *
     * @param flowName The name of the flow to run
     * @param expect The expected output
     */
    protected <T> void runFlowAndExpectProperties(String flowName, Map<String,Object> expect) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = FunctionalTestCase.getTestEvent(null);
        MuleEvent responseEvent = flow.process(event);
        Set<String> keySet = expect.keySet();
        for (String key : keySet) {
            assertTrue("Response does not contain the property "+ key,responseEvent.getMessage().getPropertyNames(PropertyScope.INBOUND).contains(key));
            assertEquals(expect.get(key),responseEvent.getMessage().getProperty(key,PropertyScope.INBOUND));
            
        }
        
        
    }

    /**
    * Run the flow specified by name using the specified payload and assert
    * equality on the expected output
    *
    * @param flowName The name of the flow to run
    * @param expect The expected output
    * @param payload The payload of the input event
    */
    protected <T, U> void runFlowWithPayloadAndExpect(String flowName, T expect, U payload) throws Exception
    {
        Flow flow = lookupFlowConstruct(flowName);
        MuleEvent event = FunctionalTestCase.getTestEvent(payload);
        MuleEvent responseEvent = flow.process(event);

        assertEquals(expect, responseEvent.getMessage().getPayload());
    }

    /**
     * Retrieve a flow by name from the registry
     *
     * @param name Name of the flow to retrieve
     */
    protected Flow lookupFlowConstruct(String name)
    {
        return (Flow) FunctionalTestCase.muleContext.getRegistry().lookupFlowConstruct(name);
    }
}
