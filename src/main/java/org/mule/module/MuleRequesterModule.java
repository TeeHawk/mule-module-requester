/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.module;

import org.mule.api.DefaultMuleException;
import org.mule.api.MuleContext;
import org.mule.api.MuleException;
import org.mule.api.MuleMessage;
import org.mule.api.annotations.Category;
import org.mule.api.annotations.Module;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.context.MuleContextAware;
import org.mule.api.transformer.Transformer;
import org.mule.transformer.types.DataTypeFactory;

/**
 * Generic module
 * 
 * @author MuleSoft, Inc.
 */
@Module(name = "mulerequester", schemaVersion = "1.0-SNAPSHOT", friendlyName = "Mule Requester")
@Category(name = "org.mule.tooling.category.core", description = "Components") 
public class MuleRequesterModule implements MuleContextAware {
    
    private MuleContext muleContext;

    public void setMuleContext(MuleContext muleContext)
    {
          this.muleContext = muleContext;
    }

    /**
     * Request a resource from an address or endpoint. <br>
     * To make the request using the address, use the format "protocol://address". E.g.: "file://path/to/file". <br>
     * Otherwise, you can use a global endpoint name. E.g.: "fileEndpoint". <br>
     * 
     * {@sample.xml ../../../doc/MuleRequester-connector.xml.sample
     * mulerequester:request}
     * 
     * @param resource
     *            The address of the resource or the global endpoint name
     * @param timeout
     *            The timeout to wait for when requesting the resource
     * @param returnClass
     *            The return class to which this processor will transform the payload from the requested resource
     * @param throwExceptionOnTimeout
     *            Whether to throw an exception or not if no message is received in the configured timeout
     * @return the payload from the requested resource
     * @throws MuleException Some exception
     */
    @Processor
    public Object request(String resource, @Optional @Default("1000") long timeout, @Optional String returnClass, @Optional Boolean throwExceptionOnTimeout) throws MuleException {
        MuleMessage message = muleContext.getClient().request(resource, timeout);
        Object result = null;
        if (message != null)
        {
            result = message.getPayload();
            if (returnClass != null) 
            {
                try {
                    Transformer transformer = muleContext.getRegistry().lookupTransformer(DataTypeFactory.create(result.getClass()), DataTypeFactory.create(Class.forName(returnClass)));
                    result = transformer.transform(result);
                } catch (ClassNotFoundException e) {
                    throw new DefaultMuleException(e);
                }
            }
            message.setPayload(result);
        } else if (Boolean.TRUE.equals(throwExceptionOnTimeout))
        {
            throw new DefaultMuleException("No message received in the configured timeout - " + timeout);
        }
        return message;
    }
}
